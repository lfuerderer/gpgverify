#! /usr/bin/env python3

import argparse, os, subprocess, sys

def parse_args():
    parser = argparse.ArgumentParser(description="Validate gpg signatures.")
    parser.add_argument(
        "--accept-fp",
        dest="fp",
        metavar="fingerprint",
        required=True,
        help="gpg fingerprint to accept signatures from",
    )
    parser.add_argument(
        "--decrypt-to",
        dest="decrypt_location",
        metavar="decrypted_file",
        help="Instruct gpg to decrypt the (signed and encrypted) file instead of just validating a signature. Store the result at the specified location.",
    )
    parser.add_argument(
        "sigfile",
        metavar="signature_file",
        help="The file containing the gpg signature",
    )
    parser.add_argument(
        "datafile",
        nargs="?",
        help="The content file that has been signed if signature_file is a detached signature",
    )
    return parser.parse_args()

def read_all(fd):
    buffer = b""
    while True:
        block = os.read(fd, 65536)
        if len(block) == 0:
            return buffer
        buffer += block

def run_verify(args):
    status_r, status_w = os.pipe()
    operation = ["--verify"]
    if args.decrypt_location is not None:
        operation = ["--decrypt", "--output", args.decrypt_location]
    gpg = subprocess.Popen(
        [
            "gpg",
            "--batch",
            "--status-fd", str(status_w),
        ] + operation + [
            args.sigfile,
        ] + ([] if args.datafile is None else [args.datafile]),
        pass_fds = (status_w,),
    )
    os.close(status_w)
    return read_all(status_r)

class Signature:
    def __init__(self):
        self.good = False
        self.fingerprint = None
        self.key_validity = False

def evaluate_result(args, status_output):
    lines = status_output.decode().split("\n")
    signatures = []
    for line in lines:
        if not line.startswith("[GNUPG:] "):
            continue
        status = line[9:].split(" ")
        if status[0] == "NEWSIG":
            signatures.append(Signature())
        elif status[0] == "GOODSIG" and len(signatures) > 0:
            signatures[-1].good = True
        elif status[0] == "VALIDSIG" and len(signatures) > 0 and len(status) >= 11:
            signatures[-1].fingerprint = status[10]
        elif status[0] in ("TRUST_FULLY", "TRUST_ULTIMATE") and len(signatures) > 0:
            signatures[-1].key_validity = True
    found_accepted_sig = False
    for signature in signatures:
        if signature.good and signature.key_validity and \
                signature.fingerprint is not None and \
                signature.fingerprint == args.fp:
            found_accepted_sig = True
    if not found_accepted_sig and args.decrypt_location is not None:
        # Delete a decrypted file with invalid signature to ensure, it will not
        # be used.
        try:
            os.unlink(args.decrypt_location)
        except FileNotFoundError:
            pass
    exit_code = 0 if found_accepted_sig else 1
    exit(exit_code)

def validate_args(args):
    if args.decrypt_location is not None and os.path.isfile(args.decrypt_location):
        print("Error: output file already exists", file=sys.stderr)
        exit(1)

def main():
    args = parse_args()
    validate_args(args)
    status_output = run_verify(args)
    evaluate_result(args, status_output)

if __name__ == '__main__':
    main()
